/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface IazoInterface extends utils.Interface {
  functions: {
    "BUYERS(address)": FunctionFragment;
    "FEE_INFO()": FunctionFragment;
    "IAZO_FACTORY()": FunctionFragment;
    "IAZO_INFO()": FunctionFragment;
    "IAZO_LIQUIDITY_LOCKER()": FunctionFragment;
    "IAZO_SETTINGS()": FunctionFragment;
    "IAZO_TIME_INFO()": FunctionFragment;
    "STATUS()": FunctionFragment;
    "TOKEN_LOCK_ADDRESS()": FunctionFragment;
    "addLiquidity()": FunctionFragment;
    "forceFailAdmin()": FunctionFragment;
    "getIAZOState()": FunctionFragment;
    "initialize(address[2],address[2],uint256[12],bool[1],address[2],address)": FunctionFragment;
    "isIAZO()": FunctionFragment;
    "sweepTokens(address[],address)": FunctionFragment;
    "updateMaxSpendLimit(uint256)": FunctionFragment;
    "updateStart(uint256,uint256)": FunctionFragment;
    "userDeposit(uint256)": FunctionFragment;
    "userDepositNative()": FunctionFragment;
    "userWithdraw()": FunctionFragment;
    "withdrawOfferTokensOnFailure()": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "BUYERS", values: [string]): string;
  encodeFunctionData(functionFragment: "FEE_INFO", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "IAZO_FACTORY",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "IAZO_INFO", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "IAZO_LIQUIDITY_LOCKER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "IAZO_SETTINGS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "IAZO_TIME_INFO",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "STATUS", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "TOKEN_LOCK_ADDRESS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addLiquidity",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "forceFailAdmin",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getIAZOState",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      [string, string],
      [string, string],
      BigNumberish[],
      [boolean],
      [string, string],
      string
    ]
  ): string;
  encodeFunctionData(functionFragment: "isIAZO", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "sweepTokens",
    values: [string[], string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateMaxSpendLimit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateStart",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "userDeposit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "userDepositNative",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "userWithdraw",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawOfferTokensOnFailure",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "BUYERS", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "FEE_INFO", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "IAZO_FACTORY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "IAZO_INFO", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "IAZO_LIQUIDITY_LOCKER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "IAZO_SETTINGS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "IAZO_TIME_INFO",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "STATUS", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "TOKEN_LOCK_ADDRESS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "forceFailAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getIAZOState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isIAZO", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "sweepTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateMaxSpendLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateStart",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userDepositNative",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawOfferTokensOnFailure",
    data: BytesLike
  ): Result;

  events: {
    "AddLiquidity(uint256,uint256,uint256)": EventFragment;
    "FeesCollected(address,uint256,uint256)": EventFragment;
    "ForceFailed(address)": EventFragment;
    "SweepWithdraw(address,address,uint256)": EventFragment;
    "UpdateIAZOBlocks(uint256,uint256,uint256,uint256)": EventFragment;
    "UpdateMaxSpendLimit(uint256,uint256)": EventFragment;
    "UserDeposited(address,uint256)": EventFragment;
    "UserWithdrawFailed(address,uint256)": EventFragment;
    "UserWithdrawSuccess(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AddLiquidity"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FeesCollected"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ForceFailed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SweepWithdraw"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateIAZOBlocks"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateMaxSpendLimit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UserDeposited"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UserWithdrawFailed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UserWithdrawSuccess"): EventFragment;
}

export type AddLiquidityEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber],
  {
    baseLiquidity: BigNumber;
    saleTokenLiquidity: BigNumber;
    remainingBaseBalance: BigNumber;
  }
>;

export type AddLiquidityEventFilter = TypedEventFilter<AddLiquidityEvent>;

export type FeesCollectedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  { feeAddress: string; baseFeeCollected: BigNumber; IAZOTokenFee: BigNumber }
>;

export type FeesCollectedEventFilter = TypedEventFilter<FeesCollectedEvent>;

export type ForceFailedEvent = TypedEvent<[string], { by: string }>;

export type ForceFailedEventFilter = TypedEventFilter<ForceFailedEvent>;

export type SweepWithdrawEvent = TypedEvent<
  [string, string, BigNumber],
  { receiver: string; token: string; balance: BigNumber }
>;

export type SweepWithdrawEventFilter = TypedEventFilter<SweepWithdrawEvent>;

export type UpdateIAZOBlocksEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, BigNumber],
  {
    previousStartTime: BigNumber;
    newStartBlock: BigNumber;
    previousActiveTime: BigNumber;
    newActiveBlocks: BigNumber;
  }
>;

export type UpdateIAZOBlocksEventFilter =
  TypedEventFilter<UpdateIAZOBlocksEvent>;

export type UpdateMaxSpendLimitEvent = TypedEvent<
  [BigNumber, BigNumber],
  { previousMaxSpend: BigNumber; newMaxSpend: BigNumber }
>;

export type UpdateMaxSpendLimitEventFilter =
  TypedEventFilter<UpdateMaxSpendLimitEvent>;

export type UserDepositedEvent = TypedEvent<
  [string, BigNumber],
  { _address: string; _amount: BigNumber }
>;

export type UserDepositedEventFilter = TypedEventFilter<UserDepositedEvent>;

export type UserWithdrawFailedEvent = TypedEvent<
  [string, BigNumber],
  { _address: string; _amount: BigNumber }
>;

export type UserWithdrawFailedEventFilter =
  TypedEventFilter<UserWithdrawFailedEvent>;

export type UserWithdrawSuccessEvent = TypedEvent<
  [string, BigNumber],
  { _address: string; _amount: BigNumber }
>;

export type UserWithdrawSuccessEventFilter =
  TypedEventFilter<UserWithdrawSuccessEvent>;

export interface Iazo extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IazoInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    BUYERS(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { deposited: BigNumber; tokensBought: BigNumber }
    >;

    FEE_INFO(
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber] & {
        FEE_ADDRESS: string;
        BASE_FEE: BigNumber;
        IAZO_TOKEN_FEE: BigNumber;
      }
    >;

    IAZO_FACTORY(overrides?: CallOverrides): Promise<[string]>;

    IAZO_INFO(
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        string,
        boolean,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean
      ] & {
        IAZO_OWNER: string;
        IAZO_TOKEN: string;
        BASE_TOKEN: string;
        IAZO_SALE_IN_NATIVE: boolean;
        TOKEN_PRICE: BigNumber;
        AMOUNT: BigNumber;
        HARDCAP: BigNumber;
        SOFTCAP: BigNumber;
        MAX_SPEND_PER_BUYER: BigNumber;
        LIQUIDITY_PERCENT: BigNumber;
        LISTING_PRICE: BigNumber;
        BURN_REMAINS: boolean;
      }
    >;

    IAZO_LIQUIDITY_LOCKER(overrides?: CallOverrides): Promise<[string]>;

    IAZO_SETTINGS(overrides?: CallOverrides): Promise<[string]>;

    IAZO_TIME_INFO(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        START_TIME: BigNumber;
        ACTIVE_TIME: BigNumber;
        LOCK_PERIOD: BigNumber;
      }
    >;

    STATUS(
      overrides?: CallOverrides
    ): Promise<
      [
        boolean,
        boolean,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        LP_GENERATION_COMPLETE: boolean;
        FORCE_FAILED: boolean;
        TOTAL_BASE_COLLECTED: BigNumber;
        TOTAL_TOKENS_SOLD: BigNumber;
        TOTAL_TOKENS_WITHDRAWN: BigNumber;
        TOTAL_BASE_WITHDRAWN: BigNumber;
        NUM_BUYERS: BigNumber;
      }
    >;

    TOKEN_LOCK_ADDRESS(overrides?: CallOverrides): Promise<[string]>;

    addLiquidity(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    forceFailAdmin(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getIAZOState(overrides?: CallOverrides): Promise<[BigNumber]>;

    initialize(
      _addresses: [string, string],
      _addressesPayable: [string, string],
      _uint256s: BigNumberish[],
      _bools: [boolean],
      _ERC20s: [string, string],
      _wnative: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isIAZO(overrides?: CallOverrides): Promise<[boolean]>;

    sweepTokens(
      _tokens: string[],
      _to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateMaxSpendLimit(
      _maxSpend: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateStart(
      _startTime: BigNumberish,
      _activeTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    userDeposit(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    userDepositNative(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    userWithdraw(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawOfferTokensOnFailure(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  BUYERS(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { deposited: BigNumber; tokensBought: BigNumber }
  >;

  FEE_INFO(
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, BigNumber] & {
      FEE_ADDRESS: string;
      BASE_FEE: BigNumber;
      IAZO_TOKEN_FEE: BigNumber;
    }
  >;

  IAZO_FACTORY(overrides?: CallOverrides): Promise<string>;

  IAZO_INFO(
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      string,
      string,
      boolean,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      boolean
    ] & {
      IAZO_OWNER: string;
      IAZO_TOKEN: string;
      BASE_TOKEN: string;
      IAZO_SALE_IN_NATIVE: boolean;
      TOKEN_PRICE: BigNumber;
      AMOUNT: BigNumber;
      HARDCAP: BigNumber;
      SOFTCAP: BigNumber;
      MAX_SPEND_PER_BUYER: BigNumber;
      LIQUIDITY_PERCENT: BigNumber;
      LISTING_PRICE: BigNumber;
      BURN_REMAINS: boolean;
    }
  >;

  IAZO_LIQUIDITY_LOCKER(overrides?: CallOverrides): Promise<string>;

  IAZO_SETTINGS(overrides?: CallOverrides): Promise<string>;

  IAZO_TIME_INFO(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      START_TIME: BigNumber;
      ACTIVE_TIME: BigNumber;
      LOCK_PERIOD: BigNumber;
    }
  >;

  STATUS(
    overrides?: CallOverrides
  ): Promise<
    [
      boolean,
      boolean,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      LP_GENERATION_COMPLETE: boolean;
      FORCE_FAILED: boolean;
      TOTAL_BASE_COLLECTED: BigNumber;
      TOTAL_TOKENS_SOLD: BigNumber;
      TOTAL_TOKENS_WITHDRAWN: BigNumber;
      TOTAL_BASE_WITHDRAWN: BigNumber;
      NUM_BUYERS: BigNumber;
    }
  >;

  TOKEN_LOCK_ADDRESS(overrides?: CallOverrides): Promise<string>;

  addLiquidity(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  forceFailAdmin(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getIAZOState(overrides?: CallOverrides): Promise<BigNumber>;

  initialize(
    _addresses: [string, string],
    _addressesPayable: [string, string],
    _uint256s: BigNumberish[],
    _bools: [boolean],
    _ERC20s: [string, string],
    _wnative: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isIAZO(overrides?: CallOverrides): Promise<boolean>;

  sweepTokens(
    _tokens: string[],
    _to: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateMaxSpendLimit(
    _maxSpend: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateStart(
    _startTime: BigNumberish,
    _activeTime: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  userDeposit(
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  userDepositNative(
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  userWithdraw(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawOfferTokensOnFailure(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    BUYERS(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { deposited: BigNumber; tokensBought: BigNumber }
    >;

    FEE_INFO(
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber] & {
        FEE_ADDRESS: string;
        BASE_FEE: BigNumber;
        IAZO_TOKEN_FEE: BigNumber;
      }
    >;

    IAZO_FACTORY(overrides?: CallOverrides): Promise<string>;

    IAZO_INFO(
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        string,
        boolean,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean
      ] & {
        IAZO_OWNER: string;
        IAZO_TOKEN: string;
        BASE_TOKEN: string;
        IAZO_SALE_IN_NATIVE: boolean;
        TOKEN_PRICE: BigNumber;
        AMOUNT: BigNumber;
        HARDCAP: BigNumber;
        SOFTCAP: BigNumber;
        MAX_SPEND_PER_BUYER: BigNumber;
        LIQUIDITY_PERCENT: BigNumber;
        LISTING_PRICE: BigNumber;
        BURN_REMAINS: boolean;
      }
    >;

    IAZO_LIQUIDITY_LOCKER(overrides?: CallOverrides): Promise<string>;

    IAZO_SETTINGS(overrides?: CallOverrides): Promise<string>;

    IAZO_TIME_INFO(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        START_TIME: BigNumber;
        ACTIVE_TIME: BigNumber;
        LOCK_PERIOD: BigNumber;
      }
    >;

    STATUS(
      overrides?: CallOverrides
    ): Promise<
      [
        boolean,
        boolean,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        LP_GENERATION_COMPLETE: boolean;
        FORCE_FAILED: boolean;
        TOTAL_BASE_COLLECTED: BigNumber;
        TOTAL_TOKENS_SOLD: BigNumber;
        TOTAL_TOKENS_WITHDRAWN: BigNumber;
        TOTAL_BASE_WITHDRAWN: BigNumber;
        NUM_BUYERS: BigNumber;
      }
    >;

    TOKEN_LOCK_ADDRESS(overrides?: CallOverrides): Promise<string>;

    addLiquidity(overrides?: CallOverrides): Promise<boolean>;

    forceFailAdmin(overrides?: CallOverrides): Promise<void>;

    getIAZOState(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _addresses: [string, string],
      _addressesPayable: [string, string],
      _uint256s: BigNumberish[],
      _bools: [boolean],
      _ERC20s: [string, string],
      _wnative: string,
      overrides?: CallOverrides
    ): Promise<void>;

    isIAZO(overrides?: CallOverrides): Promise<boolean>;

    sweepTokens(
      _tokens: string[],
      _to: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateMaxSpendLimit(
      _maxSpend: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateStart(
      _startTime: BigNumberish,
      _activeTime: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    userDeposit(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    userDepositNative(overrides?: CallOverrides): Promise<void>;

    userWithdraw(overrides?: CallOverrides): Promise<void>;

    withdrawOfferTokensOnFailure(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "AddLiquidity(uint256,uint256,uint256)"(
      baseLiquidity?: null,
      saleTokenLiquidity?: null,
      remainingBaseBalance?: null
    ): AddLiquidityEventFilter;
    AddLiquidity(
      baseLiquidity?: null,
      saleTokenLiquidity?: null,
      remainingBaseBalance?: null
    ): AddLiquidityEventFilter;

    "FeesCollected(address,uint256,uint256)"(
      feeAddress?: string | null,
      baseFeeCollected?: null,
      IAZOTokenFee?: null
    ): FeesCollectedEventFilter;
    FeesCollected(
      feeAddress?: string | null,
      baseFeeCollected?: null,
      IAZOTokenFee?: null
    ): FeesCollectedEventFilter;

    "ForceFailed(address)"(by?: string | null): ForceFailedEventFilter;
    ForceFailed(by?: string | null): ForceFailedEventFilter;

    "SweepWithdraw(address,address,uint256)"(
      receiver?: string | null,
      token?: string | null,
      balance?: null
    ): SweepWithdrawEventFilter;
    SweepWithdraw(
      receiver?: string | null,
      token?: string | null,
      balance?: null
    ): SweepWithdrawEventFilter;

    "UpdateIAZOBlocks(uint256,uint256,uint256,uint256)"(
      previousStartTime?: null,
      newStartBlock?: null,
      previousActiveTime?: null,
      newActiveBlocks?: null
    ): UpdateIAZOBlocksEventFilter;
    UpdateIAZOBlocks(
      previousStartTime?: null,
      newStartBlock?: null,
      previousActiveTime?: null,
      newActiveBlocks?: null
    ): UpdateIAZOBlocksEventFilter;

    "UpdateMaxSpendLimit(uint256,uint256)"(
      previousMaxSpend?: null,
      newMaxSpend?: null
    ): UpdateMaxSpendLimitEventFilter;
    UpdateMaxSpendLimit(
      previousMaxSpend?: null,
      newMaxSpend?: null
    ): UpdateMaxSpendLimitEventFilter;

    "UserDeposited(address,uint256)"(
      _address?: null,
      _amount?: null
    ): UserDepositedEventFilter;
    UserDeposited(_address?: null, _amount?: null): UserDepositedEventFilter;

    "UserWithdrawFailed(address,uint256)"(
      _address?: null,
      _amount?: null
    ): UserWithdrawFailedEventFilter;
    UserWithdrawFailed(
      _address?: null,
      _amount?: null
    ): UserWithdrawFailedEventFilter;

    "UserWithdrawSuccess(address,uint256)"(
      _address?: null,
      _amount?: null
    ): UserWithdrawSuccessEventFilter;
    UserWithdrawSuccess(
      _address?: null,
      _amount?: null
    ): UserWithdrawSuccessEventFilter;
  };

  estimateGas: {
    BUYERS(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    FEE_INFO(overrides?: CallOverrides): Promise<BigNumber>;

    IAZO_FACTORY(overrides?: CallOverrides): Promise<BigNumber>;

    IAZO_INFO(overrides?: CallOverrides): Promise<BigNumber>;

    IAZO_LIQUIDITY_LOCKER(overrides?: CallOverrides): Promise<BigNumber>;

    IAZO_SETTINGS(overrides?: CallOverrides): Promise<BigNumber>;

    IAZO_TIME_INFO(overrides?: CallOverrides): Promise<BigNumber>;

    STATUS(overrides?: CallOverrides): Promise<BigNumber>;

    TOKEN_LOCK_ADDRESS(overrides?: CallOverrides): Promise<BigNumber>;

    addLiquidity(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    forceFailAdmin(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getIAZOState(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _addresses: [string, string],
      _addressesPayable: [string, string],
      _uint256s: BigNumberish[],
      _bools: [boolean],
      _ERC20s: [string, string],
      _wnative: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isIAZO(overrides?: CallOverrides): Promise<BigNumber>;

    sweepTokens(
      _tokens: string[],
      _to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateMaxSpendLimit(
      _maxSpend: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateStart(
      _startTime: BigNumberish,
      _activeTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    userDeposit(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    userDepositNative(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    userWithdraw(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawOfferTokensOnFailure(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    BUYERS(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    FEE_INFO(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    IAZO_FACTORY(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    IAZO_INFO(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    IAZO_LIQUIDITY_LOCKER(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    IAZO_SETTINGS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    IAZO_TIME_INFO(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    STATUS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    TOKEN_LOCK_ADDRESS(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    addLiquidity(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    forceFailAdmin(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getIAZOState(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      _addresses: [string, string],
      _addressesPayable: [string, string],
      _uint256s: BigNumberish[],
      _bools: [boolean],
      _ERC20s: [string, string],
      _wnative: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isIAZO(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    sweepTokens(
      _tokens: string[],
      _to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateMaxSpendLimit(
      _maxSpend: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateStart(
      _startTime: BigNumberish,
      _activeTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    userDeposit(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    userDepositNative(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    userWithdraw(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawOfferTokensOnFailure(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
