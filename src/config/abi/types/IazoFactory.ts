/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface IazoFactoryInterface extends utils.Interface {
  functions: {
    "IAZOImplementations(uint256)": FunctionFragment;
    "IAZOVersion()": FunctionFragment;
    "IAZO_EXPOSER()": FunctionFragment;
    "IAZO_LIQUIDITY_LOCKER()": FunctionFragment;
    "IAZO_SETTINGS()": FunctionFragment;
    "WNative()": FunctionFragment;
    "createIAZO(address,address,address,bool,uint256[9])": FunctionFragment;
    "getHardCap(uint256,uint256)": FunctionFragment;
    "getTokensRequired(uint256,uint256,uint256,uint256)": FunctionFragment;
    "initialize(address,address,address,address,address,address)": FunctionFragment;
    "isIAZOFactory()": FunctionFragment;
    "owner()": FunctionFragment;
    "pushIAZOVersion(address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setIAZOVersion(uint256)": FunctionFragment;
    "sweepTokens(address[],address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "IAZOImplementations",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "IAZOVersion",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "IAZO_EXPOSER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "IAZO_LIQUIDITY_LOCKER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "IAZO_SETTINGS",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "WNative", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "createIAZO",
    values: [string, string, string, boolean, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getHardCap",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokensRequired",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string, string, string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "isIAZOFactory",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pushIAZOVersion",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setIAZOVersion",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "sweepTokens",
    values: [string[], string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "IAZOImplementations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "IAZOVersion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "IAZO_EXPOSER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "IAZO_LIQUIDITY_LOCKER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "IAZO_SETTINGS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "WNative", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "createIAZO", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getHardCap", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getTokensRequired",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isIAZOFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pushIAZOVersion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setIAZOVersion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sweepTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "IAZOCreated(address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "PushIAZOVersion(address,uint256)": EventFragment;
    "SweepWithdraw(address,address,uint256)": EventFragment;
    "UpdateIAZOVersion(uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "IAZOCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PushIAZOVersion"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SweepWithdraw"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateIAZOVersion"): EventFragment;
}

export type IAZOCreatedEvent = TypedEvent<[string], { newIAZO: string }>;

export type IAZOCreatedEventFilter = TypedEventFilter<IAZOCreatedEvent>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export type PushIAZOVersionEvent = TypedEvent<
  [string, BigNumber],
  { newIAZO: string; versionId: BigNumber }
>;

export type PushIAZOVersionEventFilter = TypedEventFilter<PushIAZOVersionEvent>;

export type SweepWithdrawEvent = TypedEvent<
  [string, string, BigNumber],
  { receiver: string; token: string; balance: BigNumber }
>;

export type SweepWithdrawEventFilter = TypedEventFilter<SweepWithdrawEvent>;

export type UpdateIAZOVersionEvent = TypedEvent<
  [BigNumber, BigNumber],
  { previousVersion: BigNumber; newVersion: BigNumber }
>;

export type UpdateIAZOVersionEventFilter =
  TypedEventFilter<UpdateIAZOVersionEvent>;

export interface IazoFactory extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IazoFactoryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    IAZOImplementations(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    IAZOVersion(overrides?: CallOverrides): Promise<[BigNumber]>;

    IAZO_EXPOSER(overrides?: CallOverrides): Promise<[string]>;

    IAZO_LIQUIDITY_LOCKER(overrides?: CallOverrides): Promise<[string]>;

    IAZO_SETTINGS(overrides?: CallOverrides): Promise<[string]>;

    WNative(overrides?: CallOverrides): Promise<[string]>;

    createIAZO(
      _IAZOOwner: string,
      _IAZOToken: string,
      _baseToken: string,
      _burnRemains: boolean,
      _uint_params: BigNumberish[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getHardCap(
      _amount: BigNumberish,
      _tokenPrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getTokensRequired(
      _amount: BigNumberish,
      _tokenPrice: BigNumberish,
      _listingPrice: BigNumberish,
      _liquidityPercent: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    initialize(
      _iazoExposer: string,
      _iazoSettings: string,
      _iazoliquidityLocker: string,
      _iazoInitialImplementation: string,
      _wnative: string,
      _admin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isIAZOFactory(overrides?: CallOverrides): Promise<[boolean]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pushIAZOVersion(
      _newIAZOImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setIAZOVersion(
      _newIAZOVersion: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    sweepTokens(
      _tokens: string[],
      _to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  IAZOImplementations(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  IAZOVersion(overrides?: CallOverrides): Promise<BigNumber>;

  IAZO_EXPOSER(overrides?: CallOverrides): Promise<string>;

  IAZO_LIQUIDITY_LOCKER(overrides?: CallOverrides): Promise<string>;

  IAZO_SETTINGS(overrides?: CallOverrides): Promise<string>;

  WNative(overrides?: CallOverrides): Promise<string>;

  createIAZO(
    _IAZOOwner: string,
    _IAZOToken: string,
    _baseToken: string,
    _burnRemains: boolean,
    _uint_params: BigNumberish[],
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getHardCap(
    _amount: BigNumberish,
    _tokenPrice: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTokensRequired(
    _amount: BigNumberish,
    _tokenPrice: BigNumberish,
    _listingPrice: BigNumberish,
    _liquidityPercent: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  initialize(
    _iazoExposer: string,
    _iazoSettings: string,
    _iazoliquidityLocker: string,
    _iazoInitialImplementation: string,
    _wnative: string,
    _admin: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isIAZOFactory(overrides?: CallOverrides): Promise<boolean>;

  owner(overrides?: CallOverrides): Promise<string>;

  pushIAZOVersion(
    _newIAZOImplementation: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setIAZOVersion(
    _newIAZOVersion: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  sweepTokens(
    _tokens: string[],
    _to: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    IAZOImplementations(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    IAZOVersion(overrides?: CallOverrides): Promise<BigNumber>;

    IAZO_EXPOSER(overrides?: CallOverrides): Promise<string>;

    IAZO_LIQUIDITY_LOCKER(overrides?: CallOverrides): Promise<string>;

    IAZO_SETTINGS(overrides?: CallOverrides): Promise<string>;

    WNative(overrides?: CallOverrides): Promise<string>;

    createIAZO(
      _IAZOOwner: string,
      _IAZOToken: string,
      _baseToken: string,
      _burnRemains: boolean,
      _uint_params: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    getHardCap(
      _amount: BigNumberish,
      _tokenPrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTokensRequired(
      _amount: BigNumberish,
      _tokenPrice: BigNumberish,
      _listingPrice: BigNumberish,
      _liquidityPercent: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      _iazoExposer: string,
      _iazoSettings: string,
      _iazoliquidityLocker: string,
      _iazoInitialImplementation: string,
      _wnative: string,
      _admin: string,
      overrides?: CallOverrides
    ): Promise<void>;

    isIAZOFactory(overrides?: CallOverrides): Promise<boolean>;

    owner(overrides?: CallOverrides): Promise<string>;

    pushIAZOVersion(
      _newIAZOImplementation: string,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setIAZOVersion(
      _newIAZOVersion: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    sweepTokens(
      _tokens: string[],
      _to: string,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "IAZOCreated(address)"(newIAZO?: string | null): IAZOCreatedEventFilter;
    IAZOCreated(newIAZO?: string | null): IAZOCreatedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "PushIAZOVersion(address,uint256)"(
      newIAZO?: string | null,
      versionId?: null
    ): PushIAZOVersionEventFilter;
    PushIAZOVersion(
      newIAZO?: string | null,
      versionId?: null
    ): PushIAZOVersionEventFilter;

    "SweepWithdraw(address,address,uint256)"(
      receiver?: string | null,
      token?: string | null,
      balance?: null
    ): SweepWithdrawEventFilter;
    SweepWithdraw(
      receiver?: string | null,
      token?: string | null,
      balance?: null
    ): SweepWithdrawEventFilter;

    "UpdateIAZOVersion(uint256,uint256)"(
      previousVersion?: null,
      newVersion?: null
    ): UpdateIAZOVersionEventFilter;
    UpdateIAZOVersion(
      previousVersion?: null,
      newVersion?: null
    ): UpdateIAZOVersionEventFilter;
  };

  estimateGas: {
    IAZOImplementations(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    IAZOVersion(overrides?: CallOverrides): Promise<BigNumber>;

    IAZO_EXPOSER(overrides?: CallOverrides): Promise<BigNumber>;

    IAZO_LIQUIDITY_LOCKER(overrides?: CallOverrides): Promise<BigNumber>;

    IAZO_SETTINGS(overrides?: CallOverrides): Promise<BigNumber>;

    WNative(overrides?: CallOverrides): Promise<BigNumber>;

    createIAZO(
      _IAZOOwner: string,
      _IAZOToken: string,
      _baseToken: string,
      _burnRemains: boolean,
      _uint_params: BigNumberish[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getHardCap(
      _amount: BigNumberish,
      _tokenPrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTokensRequired(
      _amount: BigNumberish,
      _tokenPrice: BigNumberish,
      _listingPrice: BigNumberish,
      _liquidityPercent: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      _iazoExposer: string,
      _iazoSettings: string,
      _iazoliquidityLocker: string,
      _iazoInitialImplementation: string,
      _wnative: string,
      _admin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isIAZOFactory(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pushIAZOVersion(
      _newIAZOImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setIAZOVersion(
      _newIAZOVersion: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    sweepTokens(
      _tokens: string[],
      _to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    IAZOImplementations(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    IAZOVersion(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    IAZO_EXPOSER(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    IAZO_LIQUIDITY_LOCKER(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    IAZO_SETTINGS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    WNative(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    createIAZO(
      _IAZOOwner: string,
      _IAZOToken: string,
      _baseToken: string,
      _burnRemains: boolean,
      _uint_params: BigNumberish[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getHardCap(
      _amount: BigNumberish,
      _tokenPrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTokensRequired(
      _amount: BigNumberish,
      _tokenPrice: BigNumberish,
      _listingPrice: BigNumberish,
      _liquidityPercent: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _iazoExposer: string,
      _iazoSettings: string,
      _iazoliquidityLocker: string,
      _iazoInitialImplementation: string,
      _wnative: string,
      _admin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isIAZOFactory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pushIAZOVersion(
      _newIAZOImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setIAZOVersion(
      _newIAZOVersion: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    sweepTokens(
      _tokens: string[],
      _to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
