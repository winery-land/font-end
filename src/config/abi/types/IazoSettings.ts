/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface IazoSettingsInterface extends utils.Interface {
  functions: {
    "DELAY_SETTINGS()": FunctionFragment;
    "SETTINGS()": FunctionFragment;
    "getAdminAddress()": FunctionFragment;
    "getBaseFee()": FunctionFragment;
    "getBurnAddress()": FunctionFragment;
    "getFeeAddress()": FunctionFragment;
    "getIAZOTokenFee()": FunctionFragment;
    "getMaxBaseFee()": FunctionFragment;
    "getMaxIAZOLength()": FunctionFragment;
    "getMaxIAZOTokenFee()": FunctionFragment;
    "getMaxLiquidityPercent()": FunctionFragment;
    "getMinIAZOLength()": FunctionFragment;
    "getMinLiquidityPercent()": FunctionFragment;
    "getMinLockPeriod()": FunctionFragment;
    "getMinStartTime()": FunctionFragment;
    "getNativeCreationFee()": FunctionFragment;
    "isAdmin(address)": FunctionFragment;
    "isIAZOSettings()": FunctionFragment;
    "setAdminAddress(address)": FunctionFragment;
    "setFeeAddress(address)": FunctionFragment;
    "setFees(uint256,uint256,uint256)": FunctionFragment;
    "setMaxIAZOLength(uint256)": FunctionFragment;
    "setMaxLiquidityPercent(uint256)": FunctionFragment;
    "setMinIAZOLength(uint256)": FunctionFragment;
    "setMinLiquidityPercent(uint256)": FunctionFragment;
    "setMinLockPeriod(uint256)": FunctionFragment;
    "setStartDelay(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "DELAY_SETTINGS",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "SETTINGS", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getAdminAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBaseFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBurnAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getFeeAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getIAZOTokenFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMaxBaseFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMaxIAZOLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMaxIAZOTokenFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMaxLiquidityPercent",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMinIAZOLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMinLiquidityPercent",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMinLockPeriod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMinStartTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getNativeCreationFee",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "isAdmin", values: [string]): string;
  encodeFunctionData(
    functionFragment: "isIAZOSettings",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setAdminAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setFeeAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setFees",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxIAZOLength",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxLiquidityPercent",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinIAZOLength",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinLiquidityPercent",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinLockPeriod",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setStartDelay",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "DELAY_SETTINGS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "SETTINGS", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAdminAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getBaseFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getBurnAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFeeAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getIAZOTokenFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMaxBaseFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMaxIAZOLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMaxIAZOTokenFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMaxLiquidityPercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMinIAZOLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMinLiquidityPercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMinLockPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMinStartTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNativeCreationFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isAdmin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isIAZOSettings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAdminAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFeeAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setFees", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setMaxIAZOLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxLiquidityPercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinIAZOLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinLiquidityPercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinLockPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setStartDelay",
    data: BytesLike
  ): Result;

  events: {
    "AdminTransferred(address,address)": EventFragment;
    "UpdateFeeAddress(address,address)": EventFragment;
    "UpdateFees(uint256,uint256,uint256,uint256,uint256,uint256)": EventFragment;
    "UpdateMaxIAZOLength(uint256,uint256)": EventFragment;
    "UpdateMaxLiquidityPercent(uint256,uint256)": EventFragment;
    "UpdateMinIAZOLength(uint256,uint256)": EventFragment;
    "UpdateMinLiquidityPercent(uint256,uint256)": EventFragment;
    "UpdateMinLockPeriod(uint256,uint256)": EventFragment;
    "UpdateStartDelay(uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AdminTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateFeeAddress"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateFees"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateMaxIAZOLength"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateMaxLiquidityPercent"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateMinIAZOLength"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateMinLiquidityPercent"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateMinLockPeriod"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateStartDelay"): EventFragment;
}

export type AdminTransferredEvent = TypedEvent<
  [string, string],
  { previousAdmin: string; newAdmin: string }
>;

export type AdminTransferredEventFilter =
  TypedEventFilter<AdminTransferredEvent>;

export type UpdateFeeAddressEvent = TypedEvent<
  [string, string],
  { previousFeeAddress: string; newFeeAddress: string }
>;

export type UpdateFeeAddressEventFilter =
  TypedEventFilter<UpdateFeeAddressEvent>;

export type UpdateFeesEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber],
  {
    previousBaseFee: BigNumber;
    newBaseFee: BigNumber;
    previousIAZOTokenFee: BigNumber;
    newIAZOTokenFee: BigNumber;
    previousETHFee: BigNumber;
    newETHFee: BigNumber;
  }
>;

export type UpdateFeesEventFilter = TypedEventFilter<UpdateFeesEvent>;

export type UpdateMaxIAZOLengthEvent = TypedEvent<
  [BigNumber, BigNumber],
  { previousMaxLength: BigNumber; newMaxLength: BigNumber }
>;

export type UpdateMaxIAZOLengthEventFilter =
  TypedEventFilter<UpdateMaxIAZOLengthEvent>;

export type UpdateMaxLiquidityPercentEvent = TypedEvent<
  [BigNumber, BigNumber],
  { previousMaxLiquidityPercent: BigNumber; newMaxLiquidityPercent: BigNumber }
>;

export type UpdateMaxLiquidityPercentEventFilter =
  TypedEventFilter<UpdateMaxLiquidityPercentEvent>;

export type UpdateMinIAZOLengthEvent = TypedEvent<
  [BigNumber, BigNumber],
  { previousMinLength: BigNumber; newMinLength: BigNumber }
>;

export type UpdateMinIAZOLengthEventFilter =
  TypedEventFilter<UpdateMinIAZOLengthEvent>;

export type UpdateMinLiquidityPercentEvent = TypedEvent<
  [BigNumber, BigNumber],
  { previousMinLiquidityPercent: BigNumber; newMinLiquidityPercent: BigNumber }
>;

export type UpdateMinLiquidityPercentEventFilter =
  TypedEventFilter<UpdateMinLiquidityPercentEvent>;

export type UpdateMinLockPeriodEvent = TypedEvent<
  [BigNumber, BigNumber],
  { previousMinLockPeriod: BigNumber; newMinLockPeriod: BigNumber }
>;

export type UpdateMinLockPeriodEventFilter =
  TypedEventFilter<UpdateMinLockPeriodEvent>;

export type UpdateStartDelayEvent = TypedEvent<
  [BigNumber, BigNumber],
  { previousStartDelay: BigNumber; newStartDelay: BigNumber }
>;

export type UpdateStartDelayEventFilter =
  TypedEventFilter<UpdateStartDelayEvent>;

export interface IazoSettings extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IazoSettingsInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    DELAY_SETTINGS(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        MIN_IAZO_LENGTH: BigNumber;
        MAX_IAZO_LENGTH: BigNumber;
        MIN_LOCK_PERIOD: BigNumber;
        START_DELAY: BigNumber;
        MAX_START_DELAY: BigNumber;
      }
    >;

    SETTINGS(
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        ADMIN_ADDRESS: string;
        FEE_ADDRESS: string;
        BURN_ADDRESS: string;
        BASE_FEE: BigNumber;
        MAX_BASE_FEE: BigNumber;
        IAZO_TOKEN_FEE: BigNumber;
        MAX_IAZO_TOKEN_FEE: BigNumber;
        NATIVE_CREATION_FEE: BigNumber;
        MIN_LIQUIDITY_PERCENT: BigNumber;
        MAX_LIQUIDITY_PERCENT: BigNumber;
      }
    >;

    getAdminAddress(overrides?: CallOverrides): Promise<[string]>;

    getBaseFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    getBurnAddress(overrides?: CallOverrides): Promise<[string]>;

    getFeeAddress(overrides?: CallOverrides): Promise<[string]>;

    getIAZOTokenFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    getMaxBaseFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    getMaxIAZOLength(overrides?: CallOverrides): Promise<[BigNumber]>;

    getMaxIAZOTokenFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    getMaxLiquidityPercent(overrides?: CallOverrides): Promise<[BigNumber]>;

    getMinIAZOLength(overrides?: CallOverrides): Promise<[BigNumber]>;

    getMinLiquidityPercent(overrides?: CallOverrides): Promise<[BigNumber]>;

    getMinLockPeriod(overrides?: CallOverrides): Promise<[BigNumber]>;

    getMinStartTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    getNativeCreationFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    isAdmin(toCheck: string, overrides?: CallOverrides): Promise<[boolean]>;

    isIAZOSettings(overrides?: CallOverrides): Promise<[boolean]>;

    setAdminAddress(
      _address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setFeeAddress(
      _feeAddress: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setFees(
      _baseFee: BigNumberish,
      _iazoTokenFee: BigNumberish,
      _nativeCreationFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMaxIAZOLength(
      _maxLength: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMaxLiquidityPercent(
      _maxLiquidityPercent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMinIAZOLength(
      _minLength: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMinLiquidityPercent(
      _minLiquidityPercent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMinLockPeriod(
      _minLockPeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setStartDelay(
      _newStartDelay: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  DELAY_SETTINGS(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      MIN_IAZO_LENGTH: BigNumber;
      MAX_IAZO_LENGTH: BigNumber;
      MIN_LOCK_PERIOD: BigNumber;
      START_DELAY: BigNumber;
      MAX_START_DELAY: BigNumber;
    }
  >;

  SETTINGS(
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      string,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      ADMIN_ADDRESS: string;
      FEE_ADDRESS: string;
      BURN_ADDRESS: string;
      BASE_FEE: BigNumber;
      MAX_BASE_FEE: BigNumber;
      IAZO_TOKEN_FEE: BigNumber;
      MAX_IAZO_TOKEN_FEE: BigNumber;
      NATIVE_CREATION_FEE: BigNumber;
      MIN_LIQUIDITY_PERCENT: BigNumber;
      MAX_LIQUIDITY_PERCENT: BigNumber;
    }
  >;

  getAdminAddress(overrides?: CallOverrides): Promise<string>;

  getBaseFee(overrides?: CallOverrides): Promise<BigNumber>;

  getBurnAddress(overrides?: CallOverrides): Promise<string>;

  getFeeAddress(overrides?: CallOverrides): Promise<string>;

  getIAZOTokenFee(overrides?: CallOverrides): Promise<BigNumber>;

  getMaxBaseFee(overrides?: CallOverrides): Promise<BigNumber>;

  getMaxIAZOLength(overrides?: CallOverrides): Promise<BigNumber>;

  getMaxIAZOTokenFee(overrides?: CallOverrides): Promise<BigNumber>;

  getMaxLiquidityPercent(overrides?: CallOverrides): Promise<BigNumber>;

  getMinIAZOLength(overrides?: CallOverrides): Promise<BigNumber>;

  getMinLiquidityPercent(overrides?: CallOverrides): Promise<BigNumber>;

  getMinLockPeriod(overrides?: CallOverrides): Promise<BigNumber>;

  getMinStartTime(overrides?: CallOverrides): Promise<BigNumber>;

  getNativeCreationFee(overrides?: CallOverrides): Promise<BigNumber>;

  isAdmin(toCheck: string, overrides?: CallOverrides): Promise<boolean>;

  isIAZOSettings(overrides?: CallOverrides): Promise<boolean>;

  setAdminAddress(
    _address: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setFeeAddress(
    _feeAddress: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setFees(
    _baseFee: BigNumberish,
    _iazoTokenFee: BigNumberish,
    _nativeCreationFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMaxIAZOLength(
    _maxLength: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMaxLiquidityPercent(
    _maxLiquidityPercent: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMinIAZOLength(
    _minLength: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMinLiquidityPercent(
    _minLiquidityPercent: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMinLockPeriod(
    _minLockPeriod: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setStartDelay(
    _newStartDelay: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    DELAY_SETTINGS(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        MIN_IAZO_LENGTH: BigNumber;
        MAX_IAZO_LENGTH: BigNumber;
        MIN_LOCK_PERIOD: BigNumber;
        START_DELAY: BigNumber;
        MAX_START_DELAY: BigNumber;
      }
    >;

    SETTINGS(
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        ADMIN_ADDRESS: string;
        FEE_ADDRESS: string;
        BURN_ADDRESS: string;
        BASE_FEE: BigNumber;
        MAX_BASE_FEE: BigNumber;
        IAZO_TOKEN_FEE: BigNumber;
        MAX_IAZO_TOKEN_FEE: BigNumber;
        NATIVE_CREATION_FEE: BigNumber;
        MIN_LIQUIDITY_PERCENT: BigNumber;
        MAX_LIQUIDITY_PERCENT: BigNumber;
      }
    >;

    getAdminAddress(overrides?: CallOverrides): Promise<string>;

    getBaseFee(overrides?: CallOverrides): Promise<BigNumber>;

    getBurnAddress(overrides?: CallOverrides): Promise<string>;

    getFeeAddress(overrides?: CallOverrides): Promise<string>;

    getIAZOTokenFee(overrides?: CallOverrides): Promise<BigNumber>;

    getMaxBaseFee(overrides?: CallOverrides): Promise<BigNumber>;

    getMaxIAZOLength(overrides?: CallOverrides): Promise<BigNumber>;

    getMaxIAZOTokenFee(overrides?: CallOverrides): Promise<BigNumber>;

    getMaxLiquidityPercent(overrides?: CallOverrides): Promise<BigNumber>;

    getMinIAZOLength(overrides?: CallOverrides): Promise<BigNumber>;

    getMinLiquidityPercent(overrides?: CallOverrides): Promise<BigNumber>;

    getMinLockPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    getMinStartTime(overrides?: CallOverrides): Promise<BigNumber>;

    getNativeCreationFee(overrides?: CallOverrides): Promise<BigNumber>;

    isAdmin(toCheck: string, overrides?: CallOverrides): Promise<boolean>;

    isIAZOSettings(overrides?: CallOverrides): Promise<boolean>;

    setAdminAddress(_address: string, overrides?: CallOverrides): Promise<void>;

    setFeeAddress(
      _feeAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setFees(
      _baseFee: BigNumberish,
      _iazoTokenFee: BigNumberish,
      _nativeCreationFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxIAZOLength(
      _maxLength: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxLiquidityPercent(
      _maxLiquidityPercent: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMinIAZOLength(
      _minLength: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMinLiquidityPercent(
      _minLiquidityPercent: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMinLockPeriod(
      _minLockPeriod: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setStartDelay(
      _newStartDelay: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AdminTransferred(address,address)"(
      previousAdmin?: string | null,
      newAdmin?: string | null
    ): AdminTransferredEventFilter;
    AdminTransferred(
      previousAdmin?: string | null,
      newAdmin?: string | null
    ): AdminTransferredEventFilter;

    "UpdateFeeAddress(address,address)"(
      previousFeeAddress?: string | null,
      newFeeAddress?: string | null
    ): UpdateFeeAddressEventFilter;
    UpdateFeeAddress(
      previousFeeAddress?: string | null,
      newFeeAddress?: string | null
    ): UpdateFeeAddressEventFilter;

    "UpdateFees(uint256,uint256,uint256,uint256,uint256,uint256)"(
      previousBaseFee?: null,
      newBaseFee?: null,
      previousIAZOTokenFee?: null,
      newIAZOTokenFee?: null,
      previousETHFee?: null,
      newETHFee?: null
    ): UpdateFeesEventFilter;
    UpdateFees(
      previousBaseFee?: null,
      newBaseFee?: null,
      previousIAZOTokenFee?: null,
      newIAZOTokenFee?: null,
      previousETHFee?: null,
      newETHFee?: null
    ): UpdateFeesEventFilter;

    "UpdateMaxIAZOLength(uint256,uint256)"(
      previousMaxLength?: null,
      newMaxLength?: null
    ): UpdateMaxIAZOLengthEventFilter;
    UpdateMaxIAZOLength(
      previousMaxLength?: null,
      newMaxLength?: null
    ): UpdateMaxIAZOLengthEventFilter;

    "UpdateMaxLiquidityPercent(uint256,uint256)"(
      previousMaxLiquidityPercent?: null,
      newMaxLiquidityPercent?: null
    ): UpdateMaxLiquidityPercentEventFilter;
    UpdateMaxLiquidityPercent(
      previousMaxLiquidityPercent?: null,
      newMaxLiquidityPercent?: null
    ): UpdateMaxLiquidityPercentEventFilter;

    "UpdateMinIAZOLength(uint256,uint256)"(
      previousMinLength?: null,
      newMinLength?: null
    ): UpdateMinIAZOLengthEventFilter;
    UpdateMinIAZOLength(
      previousMinLength?: null,
      newMinLength?: null
    ): UpdateMinIAZOLengthEventFilter;

    "UpdateMinLiquidityPercent(uint256,uint256)"(
      previousMinLiquidityPercent?: null,
      newMinLiquidityPercent?: null
    ): UpdateMinLiquidityPercentEventFilter;
    UpdateMinLiquidityPercent(
      previousMinLiquidityPercent?: null,
      newMinLiquidityPercent?: null
    ): UpdateMinLiquidityPercentEventFilter;

    "UpdateMinLockPeriod(uint256,uint256)"(
      previousMinLockPeriod?: null,
      newMinLockPeriod?: null
    ): UpdateMinLockPeriodEventFilter;
    UpdateMinLockPeriod(
      previousMinLockPeriod?: null,
      newMinLockPeriod?: null
    ): UpdateMinLockPeriodEventFilter;

    "UpdateStartDelay(uint256,uint256)"(
      previousStartDelay?: null,
      newStartDelay?: null
    ): UpdateStartDelayEventFilter;
    UpdateStartDelay(
      previousStartDelay?: null,
      newStartDelay?: null
    ): UpdateStartDelayEventFilter;
  };

  estimateGas: {
    DELAY_SETTINGS(overrides?: CallOverrides): Promise<BigNumber>;

    SETTINGS(overrides?: CallOverrides): Promise<BigNumber>;

    getAdminAddress(overrides?: CallOverrides): Promise<BigNumber>;

    getBaseFee(overrides?: CallOverrides): Promise<BigNumber>;

    getBurnAddress(overrides?: CallOverrides): Promise<BigNumber>;

    getFeeAddress(overrides?: CallOverrides): Promise<BigNumber>;

    getIAZOTokenFee(overrides?: CallOverrides): Promise<BigNumber>;

    getMaxBaseFee(overrides?: CallOverrides): Promise<BigNumber>;

    getMaxIAZOLength(overrides?: CallOverrides): Promise<BigNumber>;

    getMaxIAZOTokenFee(overrides?: CallOverrides): Promise<BigNumber>;

    getMaxLiquidityPercent(overrides?: CallOverrides): Promise<BigNumber>;

    getMinIAZOLength(overrides?: CallOverrides): Promise<BigNumber>;

    getMinLiquidityPercent(overrides?: CallOverrides): Promise<BigNumber>;

    getMinLockPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    getMinStartTime(overrides?: CallOverrides): Promise<BigNumber>;

    getNativeCreationFee(overrides?: CallOverrides): Promise<BigNumber>;

    isAdmin(toCheck: string, overrides?: CallOverrides): Promise<BigNumber>;

    isIAZOSettings(overrides?: CallOverrides): Promise<BigNumber>;

    setAdminAddress(
      _address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setFeeAddress(
      _feeAddress: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setFees(
      _baseFee: BigNumberish,
      _iazoTokenFee: BigNumberish,
      _nativeCreationFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMaxIAZOLength(
      _maxLength: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMaxLiquidityPercent(
      _maxLiquidityPercent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMinIAZOLength(
      _minLength: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMinLiquidityPercent(
      _minLiquidityPercent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMinLockPeriod(
      _minLockPeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setStartDelay(
      _newStartDelay: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    DELAY_SETTINGS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    SETTINGS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAdminAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getBaseFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getBurnAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getFeeAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getIAZOTokenFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getMaxBaseFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getMaxIAZOLength(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getMaxIAZOTokenFee(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMaxLiquidityPercent(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMinIAZOLength(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getMinLiquidityPercent(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMinLockPeriod(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getMinStartTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getNativeCreationFee(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isAdmin(
      toCheck: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isIAZOSettings(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setAdminAddress(
      _address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setFeeAddress(
      _feeAddress: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setFees(
      _baseFee: BigNumberish,
      _iazoTokenFee: BigNumberish,
      _nativeCreationFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMaxIAZOLength(
      _maxLength: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMaxLiquidityPercent(
      _maxLiquidityPercent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMinIAZOLength(
      _minLength: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMinLiquidityPercent(
      _minLiquidityPercent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMinLockPeriod(
      _minLockPeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setStartDelay(
      _newStartDelay: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
