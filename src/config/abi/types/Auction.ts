/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export type NftAuctionStruct = {
  id: BigNumberish;
  seller: string;
  highestBidder: string;
  highestBid: BigNumberish;
  timeExtension: BigNumberish;
  timeLength: BigNumberish;
  minToExtend: BigNumberish;
  startTime: BigNumberish;
  endTime: BigNumberish;
};

export type NftAuctionStructOutput = [
  BigNumber,
  string,
  string,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber
] & {
  id: BigNumber;
  seller: string;
  highestBidder: string;
  highestBid: BigNumber;
  timeExtension: BigNumber;
  timeLength: BigNumber;
  minToExtend: BigNumber;
  startTime: BigNumber;
  endTime: BigNumber;
};

export type NodeStruct = {
  data: BigNumberish;
  prev: BigNumberish;
  next: BigNumberish;
};

export type NodeStructOutput = [BigNumber, BigNumber, BigNumber] & {
  data: BigNumber;
  prev: BigNumber;
  next: BigNumber;
};

export interface AuctionInterface extends utils.Interface {
  functions: {
    "DEFAULT_ADMIN_ROLE()": FunctionFragment;
    "DIVIDEND_TAKER_ROLE()": FunctionFragment;
    "GOV_ROLE()": FunctionFragment;
    "activeAuction()": FunctionFragment;
    "activeAuctionId()": FunctionFragment;
    "activeAuctionNodeId()": FunctionFragment;
    "adminDividends()": FunctionFragment;
    "auctionDividendShare()": FunctionFragment;
    "auctionFeePercent()": FunctionFragment;
    "auctions(uint256)": FunctionFragment;
    "bid(uint256)": FunctionFragment;
    "changeFeePercent(uint256)": FunctionFragment;
    "changeMaxAuctionTimeLength(uint256)": FunctionFragment;
    "changeMinAuctionTimeLength(uint256)": FunctionFragment;
    "changeMinIncrementAmount(uint256)": FunctionFragment;
    "changeMinIncrementPercentage(uint256)": FunctionFragment;
    "changeOpenToPublic(bool)": FunctionFragment;
    "emergencyNftWithdraw(uint256)": FunctionFragment;
    "emergencyWithdraw(uint256)": FunctionFragment;
    "endAuction(uint256)": FunctionFragment;
    "getAuctionWithPosition(uint256)": FunctionFragment;
    "getAuctions()": FunctionFragment;
    "getRoleAdmin(bytes32)": FunctionFragment;
    "getRoleMember(bytes32,uint256)": FunctionFragment;
    "getRoleMemberCount(bytes32)": FunctionFragment;
    "grantRole(bytes32,address)": FunctionFragment;
    "hasRole(bytes32,address)": FunctionFragment;
    "initialize(address,uint256,uint256,uint256,uint256)": FunctionFragment;
    "lastNodeId()": FunctionFragment;
    "maxAuctionTimeLength()": FunctionFragment;
    "minAuctionTimeLength()": FunctionFragment;
    "minBid()": FunctionFragment;
    "minIncrementAmount()": FunctionFragment;
    "minIncrementPercentage()": FunctionFragment;
    "nftContract()": FunctionFragment;
    "nftIdPosition(uint256)": FunctionFragment;
    "nodes(uint256)": FunctionFragment;
    "openToPublic()": FunctionFragment;
    "pushToAuction(uint256,uint256,uint256,uint256,uint256)": FunctionFragment;
    "pushedAuctions()": FunctionFragment;
    "removeAuction(uint256)": FunctionFragment;
    "renounceRole(bytes32,address)": FunctionFragment;
    "revokeRole(bytes32,address)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "takerDividends()": FunctionFragment;
    "withdrawDividends()": FunctionFragment;
    "withdrawFees()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DIVIDEND_TAKER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "GOV_ROLE", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "activeAuction",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "activeAuctionId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "activeAuctionNodeId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "adminDividends",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "auctionDividendShare",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "auctionFeePercent",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "auctions",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "bid", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "changeFeePercent",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "changeMaxAuctionTimeLength",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "changeMinAuctionTimeLength",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "changeMinIncrementAmount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "changeMinIncrementPercentage",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "changeOpenToPublic",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyNftWithdraw",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyWithdraw",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "endAuction",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAuctionWithPosition",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAuctions",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleMember",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleMemberCount",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "lastNodeId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxAuctionTimeLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minAuctionTimeLength",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "minBid", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "minIncrementAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minIncrementPercentage",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "nftContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "nftIdPosition",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "nodes", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "openToPublic",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "pushToAuction",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "pushedAuctions",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "removeAuction",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "takerDividends",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawDividends",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawFees",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DIVIDEND_TAKER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "GOV_ROLE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "activeAuction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "activeAuctionId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "activeAuctionNodeId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "adminDividends",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "auctionDividendShare",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "auctionFeePercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "auctions", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "bid", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "changeFeePercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeMaxAuctionTimeLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeMinAuctionTimeLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeMinIncrementAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeMinIncrementPercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeOpenToPublic",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyNftWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "endAuction", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAuctionWithPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAuctions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleMember",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleMemberCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "lastNodeId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "maxAuctionTimeLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minAuctionTimeLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "minBid", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "minIncrementAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minIncrementPercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nftContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nftIdPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "nodes", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "openToPublic",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pushToAuction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pushedAuctions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeAuction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "takerDividends",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawDividends",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFees",
    data: BytesLike
  ): Result;

  events: {
    "AdminWithdrawDividends(uint256)": EventFragment;
    "AuctionCreated(address,uint256,uint256)": EventFragment;
    "AuctionEnded(address,uint256,uint256)": EventFragment;
    "AuctionOpened(bool)": EventFragment;
    "AuctionRemoved(uint256,uint256)": EventFragment;
    "ChangeFeePercent(uint256)": EventFragment;
    "ChangeMaxAuctionTimeLength(uint256)": EventFragment;
    "ChangeMinAuctionTimeLength(uint256)": EventFragment;
    "ChangeMinIncrementAmount(uint256)": EventFragment;
    "ChangeMinIncrementPercentage(uint256)": EventFragment;
    "FeePercentChanged(uint256)": EventFragment;
    "HighestBidIncreased(address,uint256,uint256,uint256)": EventFragment;
    "RoleAdminChanged(bytes32,bytes32,bytes32)": EventFragment;
    "RoleGranted(bytes32,address,address)": EventFragment;
    "RoleRevoked(bytes32,address,address)": EventFragment;
    "TakerWithdrawDividends(uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AdminWithdrawDividends"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AuctionCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AuctionEnded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AuctionOpened"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AuctionRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ChangeFeePercent"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ChangeMaxAuctionTimeLength"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ChangeMinAuctionTimeLength"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ChangeMinIncrementAmount"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "ChangeMinIncrementPercentage"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FeePercentChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "HighestBidIncreased"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TakerWithdrawDividends"): EventFragment;
}

export type AdminWithdrawDividendsEvent = TypedEvent<
  [BigNumber],
  { amount: BigNumber }
>;

export type AdminWithdrawDividendsEventFilter =
  TypedEventFilter<AdminWithdrawDividendsEvent>;

export type AuctionCreatedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  { seller: string; startingBid: BigNumber; id: BigNumber }
>;

export type AuctionCreatedEventFilter = TypedEventFilter<AuctionCreatedEvent>;

export type AuctionEndedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  { winner: string; amount: BigNumber; id: BigNumber }
>;

export type AuctionEndedEventFilter = TypedEventFilter<AuctionEndedEvent>;

export type AuctionOpenedEvent = TypedEvent<
  [boolean],
  { openToPublic: boolean }
>;

export type AuctionOpenedEventFilter = TypedEventFilter<AuctionOpenedEvent>;

export type AuctionRemovedEvent = TypedEvent<
  [BigNumber, BigNumber],
  { id: BigNumber; position: BigNumber }
>;

export type AuctionRemovedEventFilter = TypedEventFilter<AuctionRemovedEvent>;

export type ChangeFeePercentEvent = TypedEvent<
  [BigNumber],
  { amount: BigNumber }
>;

export type ChangeFeePercentEventFilter =
  TypedEventFilter<ChangeFeePercentEvent>;

export type ChangeMaxAuctionTimeLengthEvent = TypedEvent<
  [BigNumber],
  { amount: BigNumber }
>;

export type ChangeMaxAuctionTimeLengthEventFilter =
  TypedEventFilter<ChangeMaxAuctionTimeLengthEvent>;

export type ChangeMinAuctionTimeLengthEvent = TypedEvent<
  [BigNumber],
  { amount: BigNumber }
>;

export type ChangeMinAuctionTimeLengthEventFilter =
  TypedEventFilter<ChangeMinAuctionTimeLengthEvent>;

export type ChangeMinIncrementAmountEvent = TypedEvent<
  [BigNumber],
  { amount: BigNumber }
>;

export type ChangeMinIncrementAmountEventFilter =
  TypedEventFilter<ChangeMinIncrementAmountEvent>;

export type ChangeMinIncrementPercentageEvent = TypedEvent<
  [BigNumber],
  { amount: BigNumber }
>;

export type ChangeMinIncrementPercentageEventFilter =
  TypedEventFilter<ChangeMinIncrementPercentageEvent>;

export type FeePercentChangedEvent = TypedEvent<
  [BigNumber],
  { amount: BigNumber }
>;

export type FeePercentChangedEventFilter =
  TypedEventFilter<FeePercentChangedEvent>;

export type HighestBidIncreasedEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber],
  { bidder: string; amount: BigNumber; id: BigNumber; auctionNumber: BigNumber }
>;

export type HighestBidIncreasedEventFilter =
  TypedEventFilter<HighestBidIncreasedEvent>;

export type RoleAdminChangedEvent = TypedEvent<
  [string, string, string],
  { role: string; previousAdminRole: string; newAdminRole: string }
>;

export type RoleAdminChangedEventFilter =
  TypedEventFilter<RoleAdminChangedEvent>;

export type RoleGrantedEvent = TypedEvent<
  [string, string, string],
  { role: string; account: string; sender: string }
>;

export type RoleGrantedEventFilter = TypedEventFilter<RoleGrantedEvent>;

export type RoleRevokedEvent = TypedEvent<
  [string, string, string],
  { role: string; account: string; sender: string }
>;

export type RoleRevokedEventFilter = TypedEventFilter<RoleRevokedEvent>;

export type TakerWithdrawDividendsEvent = TypedEvent<
  [BigNumber],
  { amount: BigNumber }
>;

export type TakerWithdrawDividendsEventFilter =
  TypedEventFilter<TakerWithdrawDividendsEvent>;

export interface Auction extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: AuctionInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    DIVIDEND_TAKER_ROLE(overrides?: CallOverrides): Promise<[string]>;

    GOV_ROLE(overrides?: CallOverrides): Promise<[string]>;

    activeAuction(
      overrides?: CallOverrides
    ): Promise<
      [NftAuctionStructOutput, NodeStructOutput] & {
        auction: NftAuctionStructOutput;
        node: NodeStructOutput;
      }
    >;

    activeAuctionId(overrides?: CallOverrides): Promise<[BigNumber]>;

    activeAuctionNodeId(overrides?: CallOverrides): Promise<[BigNumber]>;

    adminDividends(overrides?: CallOverrides): Promise<[BigNumber]>;

    auctionDividendShare(overrides?: CallOverrides): Promise<[BigNumber]>;

    auctionFeePercent(overrides?: CallOverrides): Promise<[BigNumber]>;

    auctions(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        id: BigNumber;
        seller: string;
        highestBidder: string;
        highestBid: BigNumber;
        timeExtension: BigNumber;
        timeLength: BigNumber;
        minToExtend: BigNumber;
        startTime: BigNumber;
        endTime: BigNumber;
      }
    >;

    bid(
      _id: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    changeFeePercent(
      _auctionFeePercent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    changeMaxAuctionTimeLength(
      _maxAuctionTimeLength: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    changeMinAuctionTimeLength(
      _minAuctionTimeLength: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    changeMinIncrementAmount(
      _minIncrementAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    changeMinIncrementPercentage(
      _minIncrementPercentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    changeOpenToPublic(
      _openToPublic: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    emergencyNftWithdraw(
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    emergencyWithdraw(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    endAuction(
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getAuctionWithPosition(
      pos: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [NftAuctionStructOutput, NodeStructOutput] & {
        auction: NftAuctionStructOutput;
        node: NodeStructOutput;
      }
    >;

    getAuctions(
      overrides?: CallOverrides
    ): Promise<
      [NftAuctionStructOutput[], NodeStructOutput[]] & {
        activeAuctions: NftAuctionStructOutput[];
        currentNodes: NodeStructOutput[];
      }
    >;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    getRoleMember(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getRoleMemberCount(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    initialize(
      _nftContract: string,
      _auctionFeePercent: BigNumberish,
      _minAuctionTimeLength: BigNumberish,
      _maxAuctionTimeLength: BigNumberish,
      _auctionDividendShare: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    lastNodeId(overrides?: CallOverrides): Promise<[BigNumber]>;

    maxAuctionTimeLength(overrides?: CallOverrides): Promise<[BigNumber]>;

    minAuctionTimeLength(overrides?: CallOverrides): Promise<[BigNumber]>;

    minBid(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        minIncrement: BigNumber;
        minimumBid: BigNumber;
      }
    >;

    minIncrementAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    minIncrementPercentage(overrides?: CallOverrides): Promise<[BigNumber]>;

    nftContract(overrides?: CallOverrides): Promise<[string]>;

    nftIdPosition(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    nodes(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        data: BigNumber;
        prev: BigNumber;
        next: BigNumber;
      }
    >;

    openToPublic(overrides?: CallOverrides): Promise<[boolean]>;

    pushToAuction(
      _id: BigNumberish,
      _auctionTimeLength: BigNumberish,
      _auctionTimeExtension: BigNumberish,
      _minToExtend: BigNumberish,
      _minimumBid: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    pushedAuctions(overrides?: CallOverrides): Promise<[BigNumber]>;

    removeAuction(
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    takerDividends(overrides?: CallOverrides): Promise<[BigNumber]>;

    withdrawDividends(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawFees(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  DIVIDEND_TAKER_ROLE(overrides?: CallOverrides): Promise<string>;

  GOV_ROLE(overrides?: CallOverrides): Promise<string>;

  activeAuction(
    overrides?: CallOverrides
  ): Promise<
    [NftAuctionStructOutput, NodeStructOutput] & {
      auction: NftAuctionStructOutput;
      node: NodeStructOutput;
    }
  >;

  activeAuctionId(overrides?: CallOverrides): Promise<BigNumber>;

  activeAuctionNodeId(overrides?: CallOverrides): Promise<BigNumber>;

  adminDividends(overrides?: CallOverrides): Promise<BigNumber>;

  auctionDividendShare(overrides?: CallOverrides): Promise<BigNumber>;

  auctionFeePercent(overrides?: CallOverrides): Promise<BigNumber>;

  auctions(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      string,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      id: BigNumber;
      seller: string;
      highestBidder: string;
      highestBid: BigNumber;
      timeExtension: BigNumber;
      timeLength: BigNumber;
      minToExtend: BigNumber;
      startTime: BigNumber;
      endTime: BigNumber;
    }
  >;

  bid(
    _id: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  changeFeePercent(
    _auctionFeePercent: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  changeMaxAuctionTimeLength(
    _maxAuctionTimeLength: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  changeMinAuctionTimeLength(
    _minAuctionTimeLength: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  changeMinIncrementAmount(
    _minIncrementAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  changeMinIncrementPercentage(
    _minIncrementPercentage: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  changeOpenToPublic(
    _openToPublic: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  emergencyNftWithdraw(
    _id: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  emergencyWithdraw(
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  endAuction(
    _id: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getAuctionWithPosition(
    pos: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [NftAuctionStructOutput, NodeStructOutput] & {
      auction: NftAuctionStructOutput;
      node: NodeStructOutput;
    }
  >;

  getAuctions(
    overrides?: CallOverrides
  ): Promise<
    [NftAuctionStructOutput[], NodeStructOutput[]] & {
      activeAuctions: NftAuctionStructOutput[];
      currentNodes: NodeStructOutput[];
    }
  >;

  getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

  getRoleMember(
    role: BytesLike,
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getRoleMemberCount(
    role: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  grantRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  hasRole(
    role: BytesLike,
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  initialize(
    _nftContract: string,
    _auctionFeePercent: BigNumberish,
    _minAuctionTimeLength: BigNumberish,
    _maxAuctionTimeLength: BigNumberish,
    _auctionDividendShare: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  lastNodeId(overrides?: CallOverrides): Promise<BigNumber>;

  maxAuctionTimeLength(overrides?: CallOverrides): Promise<BigNumber>;

  minAuctionTimeLength(overrides?: CallOverrides): Promise<BigNumber>;

  minBid(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { minIncrement: BigNumber; minimumBid: BigNumber }
  >;

  minIncrementAmount(overrides?: CallOverrides): Promise<BigNumber>;

  minIncrementPercentage(overrides?: CallOverrides): Promise<BigNumber>;

  nftContract(overrides?: CallOverrides): Promise<string>;

  nftIdPosition(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  nodes(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      data: BigNumber;
      prev: BigNumber;
      next: BigNumber;
    }
  >;

  openToPublic(overrides?: CallOverrides): Promise<boolean>;

  pushToAuction(
    _id: BigNumberish,
    _auctionTimeLength: BigNumberish,
    _auctionTimeExtension: BigNumberish,
    _minToExtend: BigNumberish,
    _minimumBid: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  pushedAuctions(overrides?: CallOverrides): Promise<BigNumber>;

  removeAuction(
    _id: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  revokeRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  takerDividends(overrides?: CallOverrides): Promise<BigNumber>;

  withdrawDividends(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawFees(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    DIVIDEND_TAKER_ROLE(overrides?: CallOverrides): Promise<string>;

    GOV_ROLE(overrides?: CallOverrides): Promise<string>;

    activeAuction(
      overrides?: CallOverrides
    ): Promise<
      [NftAuctionStructOutput, NodeStructOutput] & {
        auction: NftAuctionStructOutput;
        node: NodeStructOutput;
      }
    >;

    activeAuctionId(overrides?: CallOverrides): Promise<BigNumber>;

    activeAuctionNodeId(overrides?: CallOverrides): Promise<BigNumber>;

    adminDividends(overrides?: CallOverrides): Promise<BigNumber>;

    auctionDividendShare(overrides?: CallOverrides): Promise<BigNumber>;

    auctionFeePercent(overrides?: CallOverrides): Promise<BigNumber>;

    auctions(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        id: BigNumber;
        seller: string;
        highestBidder: string;
        highestBid: BigNumber;
        timeExtension: BigNumber;
        timeLength: BigNumber;
        minToExtend: BigNumber;
        startTime: BigNumber;
        endTime: BigNumber;
      }
    >;

    bid(_id: BigNumberish, overrides?: CallOverrides): Promise<void>;

    changeFeePercent(
      _auctionFeePercent: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    changeMaxAuctionTimeLength(
      _maxAuctionTimeLength: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    changeMinAuctionTimeLength(
      _minAuctionTimeLength: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    changeMinIncrementAmount(
      _minIncrementAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    changeMinIncrementPercentage(
      _minIncrementPercentage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    changeOpenToPublic(
      _openToPublic: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    emergencyNftWithdraw(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    emergencyWithdraw(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    endAuction(_id: BigNumberish, overrides?: CallOverrides): Promise<void>;

    getAuctionWithPosition(
      pos: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [NftAuctionStructOutput, NodeStructOutput] & {
        auction: NftAuctionStructOutput;
        node: NodeStructOutput;
      }
    >;

    getAuctions(
      overrides?: CallOverrides
    ): Promise<
      [NftAuctionStructOutput[], NodeStructOutput[]] & {
        activeAuctions: NftAuctionStructOutput[];
        currentNodes: NodeStructOutput[];
      }
    >;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

    getRoleMember(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getRoleMemberCount(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    initialize(
      _nftContract: string,
      _auctionFeePercent: BigNumberish,
      _minAuctionTimeLength: BigNumberish,
      _maxAuctionTimeLength: BigNumberish,
      _auctionDividendShare: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    lastNodeId(overrides?: CallOverrides): Promise<BigNumber>;

    maxAuctionTimeLength(overrides?: CallOverrides): Promise<BigNumber>;

    minAuctionTimeLength(overrides?: CallOverrides): Promise<BigNumber>;

    minBid(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        minIncrement: BigNumber;
        minimumBid: BigNumber;
      }
    >;

    minIncrementAmount(overrides?: CallOverrides): Promise<BigNumber>;

    minIncrementPercentage(overrides?: CallOverrides): Promise<BigNumber>;

    nftContract(overrides?: CallOverrides): Promise<string>;

    nftIdPosition(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    nodes(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        data: BigNumber;
        prev: BigNumber;
        next: BigNumber;
      }
    >;

    openToPublic(overrides?: CallOverrides): Promise<boolean>;

    pushToAuction(
      _id: BigNumberish,
      _auctionTimeLength: BigNumberish,
      _auctionTimeExtension: BigNumberish,
      _minToExtend: BigNumberish,
      _minimumBid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    pushedAuctions(overrides?: CallOverrides): Promise<BigNumber>;

    removeAuction(_id: BigNumberish, overrides?: CallOverrides): Promise<void>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    takerDividends(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawDividends(overrides?: CallOverrides): Promise<void>;

    withdrawFees(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "AdminWithdrawDividends(uint256)"(
      amount?: null
    ): AdminWithdrawDividendsEventFilter;
    AdminWithdrawDividends(amount?: null): AdminWithdrawDividendsEventFilter;

    "AuctionCreated(address,uint256,uint256)"(
      seller?: string | null,
      startingBid?: null,
      id?: BigNumberish | null
    ): AuctionCreatedEventFilter;
    AuctionCreated(
      seller?: string | null,
      startingBid?: null,
      id?: BigNumberish | null
    ): AuctionCreatedEventFilter;

    "AuctionEnded(address,uint256,uint256)"(
      winner?: string | null,
      amount?: null,
      id?: BigNumberish | null
    ): AuctionEndedEventFilter;
    AuctionEnded(
      winner?: string | null,
      amount?: null,
      id?: BigNumberish | null
    ): AuctionEndedEventFilter;

    "AuctionOpened(bool)"(openToPublic?: null): AuctionOpenedEventFilter;
    AuctionOpened(openToPublic?: null): AuctionOpenedEventFilter;

    "AuctionRemoved(uint256,uint256)"(
      id?: BigNumberish | null,
      position?: BigNumberish | null
    ): AuctionRemovedEventFilter;
    AuctionRemoved(
      id?: BigNumberish | null,
      position?: BigNumberish | null
    ): AuctionRemovedEventFilter;

    "ChangeFeePercent(uint256)"(amount?: null): ChangeFeePercentEventFilter;
    ChangeFeePercent(amount?: null): ChangeFeePercentEventFilter;

    "ChangeMaxAuctionTimeLength(uint256)"(
      amount?: null
    ): ChangeMaxAuctionTimeLengthEventFilter;
    ChangeMaxAuctionTimeLength(
      amount?: null
    ): ChangeMaxAuctionTimeLengthEventFilter;

    "ChangeMinAuctionTimeLength(uint256)"(
      amount?: null
    ): ChangeMinAuctionTimeLengthEventFilter;
    ChangeMinAuctionTimeLength(
      amount?: null
    ): ChangeMinAuctionTimeLengthEventFilter;

    "ChangeMinIncrementAmount(uint256)"(
      amount?: null
    ): ChangeMinIncrementAmountEventFilter;
    ChangeMinIncrementAmount(
      amount?: null
    ): ChangeMinIncrementAmountEventFilter;

    "ChangeMinIncrementPercentage(uint256)"(
      amount?: null
    ): ChangeMinIncrementPercentageEventFilter;
    ChangeMinIncrementPercentage(
      amount?: null
    ): ChangeMinIncrementPercentageEventFilter;

    "FeePercentChanged(uint256)"(amount?: null): FeePercentChangedEventFilter;
    FeePercentChanged(amount?: null): FeePercentChangedEventFilter;

    "HighestBidIncreased(address,uint256,uint256,uint256)"(
      bidder?: string | null,
      amount?: null,
      id?: BigNumberish | null,
      auctionNumber?: BigNumberish | null
    ): HighestBidIncreasedEventFilter;
    HighestBidIncreased(
      bidder?: string | null,
      amount?: null,
      id?: BigNumberish | null,
      auctionNumber?: BigNumberish | null
    ): HighestBidIncreasedEventFilter;

    "RoleAdminChanged(bytes32,bytes32,bytes32)"(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null
    ): RoleAdminChangedEventFilter;
    RoleAdminChanged(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null
    ): RoleAdminChangedEventFilter;

    "RoleGranted(bytes32,address,address)"(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleGrantedEventFilter;
    RoleGranted(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleGrantedEventFilter;

    "RoleRevoked(bytes32,address,address)"(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleRevokedEventFilter;
    RoleRevoked(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleRevokedEventFilter;

    "TakerWithdrawDividends(uint256)"(
      amount?: null
    ): TakerWithdrawDividendsEventFilter;
    TakerWithdrawDividends(amount?: null): TakerWithdrawDividendsEventFilter;
  };

  estimateGas: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    DIVIDEND_TAKER_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    GOV_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    activeAuction(overrides?: CallOverrides): Promise<BigNumber>;

    activeAuctionId(overrides?: CallOverrides): Promise<BigNumber>;

    activeAuctionNodeId(overrides?: CallOverrides): Promise<BigNumber>;

    adminDividends(overrides?: CallOverrides): Promise<BigNumber>;

    auctionDividendShare(overrides?: CallOverrides): Promise<BigNumber>;

    auctionFeePercent(overrides?: CallOverrides): Promise<BigNumber>;

    auctions(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    bid(
      _id: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    changeFeePercent(
      _auctionFeePercent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    changeMaxAuctionTimeLength(
      _maxAuctionTimeLength: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    changeMinAuctionTimeLength(
      _minAuctionTimeLength: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    changeMinIncrementAmount(
      _minIncrementAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    changeMinIncrementPercentage(
      _minIncrementPercentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    changeOpenToPublic(
      _openToPublic: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    emergencyNftWithdraw(
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    emergencyWithdraw(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    endAuction(
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getAuctionWithPosition(
      pos: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAuctions(overrides?: CallOverrides): Promise<BigNumber>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleMember(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleMemberCount(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      _nftContract: string,
      _auctionFeePercent: BigNumberish,
      _minAuctionTimeLength: BigNumberish,
      _maxAuctionTimeLength: BigNumberish,
      _auctionDividendShare: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    lastNodeId(overrides?: CallOverrides): Promise<BigNumber>;

    maxAuctionTimeLength(overrides?: CallOverrides): Promise<BigNumber>;

    minAuctionTimeLength(overrides?: CallOverrides): Promise<BigNumber>;

    minBid(overrides?: CallOverrides): Promise<BigNumber>;

    minIncrementAmount(overrides?: CallOverrides): Promise<BigNumber>;

    minIncrementPercentage(overrides?: CallOverrides): Promise<BigNumber>;

    nftContract(overrides?: CallOverrides): Promise<BigNumber>;

    nftIdPosition(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    nodes(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    openToPublic(overrides?: CallOverrides): Promise<BigNumber>;

    pushToAuction(
      _id: BigNumberish,
      _auctionTimeLength: BigNumberish,
      _auctionTimeExtension: BigNumberish,
      _minToExtend: BigNumberish,
      _minimumBid: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    pushedAuctions(overrides?: CallOverrides): Promise<BigNumber>;

    removeAuction(
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    takerDividends(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawDividends(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawFees(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    DEFAULT_ADMIN_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    DIVIDEND_TAKER_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    GOV_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    activeAuction(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    activeAuctionId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    activeAuctionNodeId(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    adminDividends(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    auctionDividendShare(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    auctionFeePercent(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    auctions(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    bid(
      _id: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    changeFeePercent(
      _auctionFeePercent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    changeMaxAuctionTimeLength(
      _maxAuctionTimeLength: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    changeMinAuctionTimeLength(
      _minAuctionTimeLength: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    changeMinIncrementAmount(
      _minIncrementAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    changeMinIncrementPercentage(
      _minIncrementPercentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    changeOpenToPublic(
      _openToPublic: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    emergencyNftWithdraw(
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    emergencyWithdraw(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    endAuction(
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getAuctionWithPosition(
      pos: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAuctions(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleMember(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleMemberCount(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _nftContract: string,
      _auctionFeePercent: BigNumberish,
      _minAuctionTimeLength: BigNumberish,
      _maxAuctionTimeLength: BigNumberish,
      _auctionDividendShare: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    lastNodeId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxAuctionTimeLength(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    minAuctionTimeLength(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    minBid(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    minIncrementAmount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    minIncrementPercentage(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nftContract(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nftIdPosition(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nodes(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    openToPublic(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pushToAuction(
      _id: BigNumberish,
      _auctionTimeLength: BigNumberish,
      _auctionTimeExtension: BigNumberish,
      _minToExtend: BigNumberish,
      _minimumBid: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    pushedAuctions(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeAuction(
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    takerDividends(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdrawDividends(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawFees(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
