/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface NfaStakingInterface extends utils.Interface {
  functions: {
    "NFT_CONTRACT()": FunctionFragment;
    "REWARD_TOKEN()": FunctionFragment;
    "TIER()": FunctionFragment;
    "bonusEndBlock()": FunctionFragment;
    "deposit(uint256[])": FunctionFragment;
    "depositRewards(uint256)": FunctionFragment;
    "emergencyRewardWithdraw(uint256)": FunctionFragment;
    "emergencyWithdraw()": FunctionFragment;
    "getMultiplier(uint256,uint256)": FunctionFragment;
    "getUnharvestedRewards()": FunctionFragment;
    "initialize(address,address,uint256,uint256,uint256,uint256)": FunctionFragment;
    "maxStakedAmount()": FunctionFragment;
    "owner()": FunctionFragment;
    "pendingReward(address)": FunctionFragment;
    "poolInfo()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "rewardBalance()": FunctionFragment;
    "rewardPerBlock()": FunctionFragment;
    "setBonusEndBlock(uint256)": FunctionFragment;
    "setMaxStakedAmount(uint256)": FunctionFragment;
    "setRewardPerBlock(uint256)": FunctionFragment;
    "stakedNfts(address)": FunctionFragment;
    "startBlock()": FunctionFragment;
    "sweepToken(address)": FunctionFragment;
    "totalRewardsAllocated()": FunctionFragment;
    "totalRewardsPaid()": FunctionFragment;
    "totalStaked()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "updatePool()": FunctionFragment;
    "userInfo(address)": FunctionFragment;
    "validNFt(uint256)": FunctionFragment;
    "withdraw(uint256[])": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "NFT_CONTRACT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "REWARD_TOKEN",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "TIER", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "bonusEndBlock",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "depositRewards",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyRewardWithdraw",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyWithdraw",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMultiplier",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getUnharvestedRewards",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "maxStakedAmount",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pendingReward",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "poolInfo", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardPerBlock",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setBonusEndBlock",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxStakedAmount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setRewardPerBlock",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "stakedNfts", values: [string]): string;
  encodeFunctionData(
    functionFragment: "startBlock",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "sweepToken", values: [string]): string;
  encodeFunctionData(
    functionFragment: "totalRewardsAllocated",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalRewardsPaid",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalStaked",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePool",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "userInfo", values: [string]): string;
  encodeFunctionData(
    functionFragment: "validNFt",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish[]]
  ): string;

  decodeFunctionResult(
    functionFragment: "NFT_CONTRACT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "REWARD_TOKEN",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "TIER", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "bonusEndBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "depositRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyRewardWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMultiplier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUnharvestedRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "maxStakedAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "poolInfo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardPerBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBonusEndBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxStakedAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRewardPerBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stakedNfts", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "startBlock", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "sweepToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalRewardsAllocated",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalRewardsPaid",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalStaked",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "updatePool", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "userInfo", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "validNFt", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "Deposit(address,uint256[])": EventFragment;
    "DepositRewards(uint256)": EventFragment;
    "EmergencyRewardWithdraw(address,uint256)": EventFragment;
    "EmergencySweepWithdraw(address,address,uint256)": EventFragment;
    "EmergencyWithdraw(address,uint256)": EventFragment;
    "LogUpdateMaxStakedAmount(uint256)": EventFragment;
    "LogUpdatePool(uint256,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Withdraw(address,uint256[])": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Deposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DepositRewards"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EmergencyRewardWithdraw"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EmergencySweepWithdraw"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EmergencyWithdraw"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogUpdateMaxStakedAmount"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogUpdatePool"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdraw"): EventFragment;
}

export type DepositEvent = TypedEvent<
  [string, BigNumber[]],
  { user: string; ids: BigNumber[] }
>;

export type DepositEventFilter = TypedEventFilter<DepositEvent>;

export type DepositRewardsEvent = TypedEvent<
  [BigNumber],
  { amount: BigNumber }
>;

export type DepositRewardsEventFilter = TypedEventFilter<DepositRewardsEvent>;

export type EmergencyRewardWithdrawEvent = TypedEvent<
  [string, BigNumber],
  { user: string; amount: BigNumber }
>;

export type EmergencyRewardWithdrawEventFilter =
  TypedEventFilter<EmergencyRewardWithdrawEvent>;

export type EmergencySweepWithdrawEvent = TypedEvent<
  [string, string, BigNumber],
  { user: string; token: string; amount: BigNumber }
>;

export type EmergencySweepWithdrawEventFilter =
  TypedEventFilter<EmergencySweepWithdrawEvent>;

export type EmergencyWithdrawEvent = TypedEvent<
  [string, BigNumber],
  { user: string; amount: BigNumber }
>;

export type EmergencyWithdrawEventFilter =
  TypedEventFilter<EmergencyWithdrawEvent>;

export type LogUpdateMaxStakedAmountEvent = TypedEvent<
  [BigNumber],
  { maxStakedAmount: BigNumber }
>;

export type LogUpdateMaxStakedAmountEventFilter =
  TypedEventFilter<LogUpdateMaxStakedAmountEvent>;

export type LogUpdatePoolEvent = TypedEvent<
  [BigNumber, BigNumber],
  { bonusEndBlock: BigNumber; rewardPerBlock: BigNumber }
>;

export type LogUpdatePoolEventFilter = TypedEventFilter<LogUpdatePoolEvent>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export type WithdrawEvent = TypedEvent<
  [string, BigNumber[]],
  { user: string; ids: BigNumber[] }
>;

export type WithdrawEventFilter = TypedEventFilter<WithdrawEvent>;

export interface NfaStaking extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: NfaStakingInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    NFT_CONTRACT(overrides?: CallOverrides): Promise<[string]>;

    REWARD_TOKEN(overrides?: CallOverrides): Promise<[string]>;

    TIER(overrides?: CallOverrides): Promise<[BigNumber]>;

    bonusEndBlock(overrides?: CallOverrides): Promise<[BigNumber]>;

    deposit(
      _ids: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    depositRewards(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    emergencyRewardWithdraw(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    emergencyWithdraw(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getMultiplier(
      _from: BigNumberish,
      _to: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getUnharvestedRewards(overrides?: CallOverrides): Promise<[BigNumber]>;

    initialize(
      _nftContract: string,
      _rewardToken: string,
      _rewardPerBlock: BigNumberish,
      _startBlock: BigNumberish,
      _bonusEndBlock: BigNumberish,
      _tier: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    maxStakedAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pendingReward(
      _user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    poolInfo(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        allocPoint: BigNumber;
        lastRewardBlock: BigNumber;
        accRewardTokenPerShare: BigNumber;
      }
    >;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    rewardBalance(overrides?: CallOverrides): Promise<[BigNumber]>;

    rewardPerBlock(overrides?: CallOverrides): Promise<[BigNumber]>;

    setBonusEndBlock(
      _bonusEndBlock: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMaxStakedAmount(
      _maxStakedAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setRewardPerBlock(
      _rewardPerBlock: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stakedNfts(
      _user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    startBlock(overrides?: CallOverrides): Promise<[BigNumber]>;

    sweepToken(
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    totalRewardsAllocated(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalRewardsPaid(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalStaked(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updatePool(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    userInfo(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amount: BigNumber; rewardDebt: BigNumber }
    >;

    validNFt(_id: BigNumberish, overrides?: CallOverrides): Promise<[boolean]>;

    withdraw(
      _ids: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  NFT_CONTRACT(overrides?: CallOverrides): Promise<string>;

  REWARD_TOKEN(overrides?: CallOverrides): Promise<string>;

  TIER(overrides?: CallOverrides): Promise<BigNumber>;

  bonusEndBlock(overrides?: CallOverrides): Promise<BigNumber>;

  deposit(
    _ids: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  depositRewards(
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  emergencyRewardWithdraw(
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  emergencyWithdraw(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getMultiplier(
    _from: BigNumberish,
    _to: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getUnharvestedRewards(overrides?: CallOverrides): Promise<BigNumber>;

  initialize(
    _nftContract: string,
    _rewardToken: string,
    _rewardPerBlock: BigNumberish,
    _startBlock: BigNumberish,
    _bonusEndBlock: BigNumberish,
    _tier: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  maxStakedAmount(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  pendingReward(_user: string, overrides?: CallOverrides): Promise<BigNumber>;

  poolInfo(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      allocPoint: BigNumber;
      lastRewardBlock: BigNumber;
      accRewardTokenPerShare: BigNumber;
    }
  >;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  rewardBalance(overrides?: CallOverrides): Promise<BigNumber>;

  rewardPerBlock(overrides?: CallOverrides): Promise<BigNumber>;

  setBonusEndBlock(
    _bonusEndBlock: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMaxStakedAmount(
    _maxStakedAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setRewardPerBlock(
    _rewardPerBlock: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stakedNfts(_user: string, overrides?: CallOverrides): Promise<BigNumber[]>;

  startBlock(overrides?: CallOverrides): Promise<BigNumber>;

  sweepToken(
    token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  totalRewardsAllocated(overrides?: CallOverrides): Promise<BigNumber>;

  totalRewardsPaid(overrides?: CallOverrides): Promise<BigNumber>;

  totalStaked(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updatePool(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  userInfo(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { amount: BigNumber; rewardDebt: BigNumber }
  >;

  validNFt(_id: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

  withdraw(
    _ids: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    NFT_CONTRACT(overrides?: CallOverrides): Promise<string>;

    REWARD_TOKEN(overrides?: CallOverrides): Promise<string>;

    TIER(overrides?: CallOverrides): Promise<BigNumber>;

    bonusEndBlock(overrides?: CallOverrides): Promise<BigNumber>;

    deposit(_ids: BigNumberish[], overrides?: CallOverrides): Promise<void>;

    depositRewards(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    emergencyRewardWithdraw(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    emergencyWithdraw(overrides?: CallOverrides): Promise<void>;

    getMultiplier(
      _from: BigNumberish,
      _to: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUnharvestedRewards(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _nftContract: string,
      _rewardToken: string,
      _rewardPerBlock: BigNumberish,
      _startBlock: BigNumberish,
      _bonusEndBlock: BigNumberish,
      _tier: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    maxStakedAmount(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    pendingReward(_user: string, overrides?: CallOverrides): Promise<BigNumber>;

    poolInfo(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        allocPoint: BigNumber;
        lastRewardBlock: BigNumber;
        accRewardTokenPerShare: BigNumber;
      }
    >;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    rewardBalance(overrides?: CallOverrides): Promise<BigNumber>;

    rewardPerBlock(overrides?: CallOverrides): Promise<BigNumber>;

    setBonusEndBlock(
      _bonusEndBlock: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxStakedAmount(
      _maxStakedAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setRewardPerBlock(
      _rewardPerBlock: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    stakedNfts(_user: string, overrides?: CallOverrides): Promise<BigNumber[]>;

    startBlock(overrides?: CallOverrides): Promise<BigNumber>;

    sweepToken(token: string, overrides?: CallOverrides): Promise<void>;

    totalRewardsAllocated(overrides?: CallOverrides): Promise<BigNumber>;

    totalRewardsPaid(overrides?: CallOverrides): Promise<BigNumber>;

    totalStaked(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updatePool(overrides?: CallOverrides): Promise<void>;

    userInfo(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amount: BigNumber; rewardDebt: BigNumber }
    >;

    validNFt(_id: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    withdraw(_ids: BigNumberish[], overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "Deposit(address,uint256[])"(
      user?: string | null,
      ids?: null
    ): DepositEventFilter;
    Deposit(user?: string | null, ids?: null): DepositEventFilter;

    "DepositRewards(uint256)"(amount?: null): DepositRewardsEventFilter;
    DepositRewards(amount?: null): DepositRewardsEventFilter;

    "EmergencyRewardWithdraw(address,uint256)"(
      user?: string | null,
      amount?: null
    ): EmergencyRewardWithdrawEventFilter;
    EmergencyRewardWithdraw(
      user?: string | null,
      amount?: null
    ): EmergencyRewardWithdrawEventFilter;

    "EmergencySweepWithdraw(address,address,uint256)"(
      user?: string | null,
      token?: string | null,
      amount?: null
    ): EmergencySweepWithdrawEventFilter;
    EmergencySweepWithdraw(
      user?: string | null,
      token?: string | null,
      amount?: null
    ): EmergencySweepWithdrawEventFilter;

    "EmergencyWithdraw(address,uint256)"(
      user?: string | null,
      amount?: null
    ): EmergencyWithdrawEventFilter;
    EmergencyWithdraw(
      user?: string | null,
      amount?: null
    ): EmergencyWithdrawEventFilter;

    "LogUpdateMaxStakedAmount(uint256)"(
      maxStakedAmount?: null
    ): LogUpdateMaxStakedAmountEventFilter;
    LogUpdateMaxStakedAmount(
      maxStakedAmount?: null
    ): LogUpdateMaxStakedAmountEventFilter;

    "LogUpdatePool(uint256,uint256)"(
      bonusEndBlock?: null,
      rewardPerBlock?: null
    ): LogUpdatePoolEventFilter;
    LogUpdatePool(
      bonusEndBlock?: null,
      rewardPerBlock?: null
    ): LogUpdatePoolEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "Withdraw(address,uint256[])"(
      user?: string | null,
      ids?: null
    ): WithdrawEventFilter;
    Withdraw(user?: string | null, ids?: null): WithdrawEventFilter;
  };

  estimateGas: {
    NFT_CONTRACT(overrides?: CallOverrides): Promise<BigNumber>;

    REWARD_TOKEN(overrides?: CallOverrides): Promise<BigNumber>;

    TIER(overrides?: CallOverrides): Promise<BigNumber>;

    bonusEndBlock(overrides?: CallOverrides): Promise<BigNumber>;

    deposit(
      _ids: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    depositRewards(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    emergencyRewardWithdraw(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    emergencyWithdraw(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getMultiplier(
      _from: BigNumberish,
      _to: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUnharvestedRewards(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _nftContract: string,
      _rewardToken: string,
      _rewardPerBlock: BigNumberish,
      _startBlock: BigNumberish,
      _bonusEndBlock: BigNumberish,
      _tier: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    maxStakedAmount(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pendingReward(_user: string, overrides?: CallOverrides): Promise<BigNumber>;

    poolInfo(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    rewardBalance(overrides?: CallOverrides): Promise<BigNumber>;

    rewardPerBlock(overrides?: CallOverrides): Promise<BigNumber>;

    setBonusEndBlock(
      _bonusEndBlock: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMaxStakedAmount(
      _maxStakedAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setRewardPerBlock(
      _rewardPerBlock: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stakedNfts(_user: string, overrides?: CallOverrides): Promise<BigNumber>;

    startBlock(overrides?: CallOverrides): Promise<BigNumber>;

    sweepToken(
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    totalRewardsAllocated(overrides?: CallOverrides): Promise<BigNumber>;

    totalRewardsPaid(overrides?: CallOverrides): Promise<BigNumber>;

    totalStaked(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updatePool(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    userInfo(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    validNFt(_id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(
      _ids: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    NFT_CONTRACT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    REWARD_TOKEN(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    TIER(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    bonusEndBlock(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deposit(
      _ids: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    depositRewards(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    emergencyRewardWithdraw(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    emergencyWithdraw(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getMultiplier(
      _from: BigNumberish,
      _to: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUnharvestedRewards(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _nftContract: string,
      _rewardToken: string,
      _rewardPerBlock: BigNumberish,
      _startBlock: BigNumberish,
      _bonusEndBlock: BigNumberish,
      _tier: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    maxStakedAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingReward(
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    poolInfo(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    rewardBalance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rewardPerBlock(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setBonusEndBlock(
      _bonusEndBlock: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMaxStakedAmount(
      _maxStakedAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setRewardPerBlock(
      _rewardPerBlock: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stakedNfts(
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    startBlock(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    sweepToken(
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    totalRewardsAllocated(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalRewardsPaid(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalStaked(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updatePool(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    userInfo(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    validNFt(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdraw(
      _ids: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
